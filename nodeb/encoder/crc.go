// Copyright (c) 2010 Joseph D Poirier
// Distributable under the terms of The New BSD License
// that can be found in the LICENSE file.

// 3GPP TS 36.212 V8.6.0 (2009-03) Multiplexing and channel coding (Release 8)
// Section 5.1.1	CRC calculation

package l1enc

//import "fmt"

/**
 * G24 CRC lookup table
 *
 * CRC24	: P(X) = x^24+x^23+x^18+x^17+x^14+x^11+x^10+x^7+x^6+x^5+x^4+x^3+x^1+1
 * Width     	: 3 bytes
 * Poly      	: 0x864CFB
 * Reflected 	: false
 */
var Crc24_A = [256]uint32 {
  0x00000000,0x00864cfb,0x008ad50d,0x000c99f6,0x0093e6e1,0x0015aa1a,0x001933ec,0x009f7f17,
  0x00a18139,0x0027cdc2,0x002b5434,0x00ad18cf,0x003267d8,0x00b42b23,0x00b8b2d5,0x003efe2e,
  0x00c54e89,0x00430272,0x004f9b84,0x00c9d77f,0x0056a868,0x00d0e493,0x00dc7d65,0x005a319e,
  0x0064cfb0,0x00e2834b,0x00ee1abd,0x00685646,0x00f72951,0x007165aa,0x007dfc5c,0x00fbb0a7,
  0x000cd1e9,0x008a9d12,0x008604e4,0x0000481f,0x009f3708,0x00197bf3,0x0015e205,0x0093aefe,
  0x00ad50d0,0x002b1c2b,0x002785dd,0x00a1c926,0x003eb631,0x00b8faca,0x00b4633c,0x00322fc7,
  0x00c99f60,0x004fd39b,0x00434a6d,0x00c50696,0x005a7981,0x00dc357a,0x00d0ac8c,0x0056e077,
  0x00681e59,0x00ee52a2,0x00e2cb54,0x006487af,0x00fbf8b8,0x007db443,0x00712db5,0x00f7614e,
  0x0019a3d2,0x009fef29,0x009376df,0x00153a24,0x008a4533,0x000c09c8,0x0000903e,0x0086dcc5,
  0x00b822eb,0x003e6e10,0x0032f7e6,0x00b4bb1d,0x002bc40a,0x00ad88f1,0x00a11107,0x00275dfc,
  0x00dced5b,0x005aa1a0,0x00563856,0x00d074ad,0x004f0bba,0x00c94741,0x00c5deb7,0x0043924c,
  0x007d6c62,0x00fb2099,0x00f7b96f,0x0071f594,0x00ee8a83,0x0068c678,0x00645f8e,0x00e21375,
  0x0015723b,0x00933ec0,0x009fa736,0x0019ebcd,0x008694da,0x0000d821,0x000c41d7,0x008a0d2c,
  0x00b4f302,0x0032bff9,0x003e260f,0x00b86af4,0x002715e3,0x00a15918,0x00adc0ee,0x002b8c15,
  0x00d03cb2,0x00567049,0x005ae9bf,0x00dca544,0x0043da53,0x00c596a8,0x00c90f5e,0x004f43a5,
  0x0071bd8b,0x00f7f170,0x00fb6886,0x007d247d,0x00e25b6a,0x00641791,0x00688e67,0x00eec29c,
  0x003347a4,0x00b50b5f,0x00b992a9,0x003fde52,0x00a0a145,0x0026edbe,0x002a7448,0x00ac38b3,
  0x0092c69d,0x00148a66,0x00181390,0x009e5f6b,0x0001207c,0x00876c87,0x008bf571,0x000db98a,
  0x00f6092d,0x007045d6,0x007cdc20,0x00fa90db,0x0065efcc,0x00e3a337,0x00ef3ac1,0x0069763a,
  0x00578814,0x00d1c4ef,0x00dd5d19,0x005b11e2,0x00c46ef5,0x0042220e,0x004ebbf8,0x00c8f703,
  0x003f964d,0x00b9dab6,0x00b54340,0x00330fbb,0x00ac70ac,0x002a3c57,0x0026a5a1,0x00a0e95a,
  0x009e1774,0x00185b8f,0x0014c279,0x00928e82,0x000df195,0x008bbd6e,0x00872498,0x00016863,
  0x00fad8c4,0x007c943f,0x00700dc9,0x00f64132,0x00693e25,0x00ef72de,0x00e3eb28,0x0065a7d3,
  0x005b59fd,0x00dd1506,0x00d18cf0,0x0057c00b,0x00c8bf1c,0x004ef3e7,0x00426a11,0x00c426ea,
  0x002ae476,0x00aca88d,0x00a0317b,0x00267d80,0x00b90297,0x003f4e6c,0x0033d79a,0x00b59b61,
  0x008b654f,0x000d29b4,0x0001b042,0x0087fcb9,0x001883ae,0x009ecf55,0x009256a3,0x00141a58,
  0x00efaaff,0x0069e604,0x00657ff2,0x00e33309,0x007c4c1e,0x00fa00e5,0x00f69913,0x0070d5e8,
  0x004e2bc6,0x00c8673d,0x00c4fecb,0x0042b230,0x00ddcd27,0x005b81dc,0x0057182a,0x00d154d1,
  0x0026359f,0x00a07964,0x00ace092,0x002aac69,0x00b5d37e,0x00339f85,0x003f0673,0x00b94a88,
  0x0087b4a6,0x0001f85d,0x000d61ab,0x008b2d50,0x00145247,0x00921ebc,0x009e874a,0x0018cbb1,
  0x00e37b16,0x006537ed,0x0069ae1b,0x00efe2e0,0x00709df7,0x00f6d10c,0x00fa48fa,0x007c0401,
  0x0042fa2f,0x00c4b6d4,0x00c82f22,0x004e63d9,0x00d11cce,0x00575035,0x005bc9c3,0x00dd8538}

/**
 * G24 CRC lookup table
 *
 * CRC24		: P(X) = x^24+x^23+x^6+x^5+x^1+1
 * Width     	: 3 bytes
 * Poly      	: 0x800063
 * Reflected 	: false
 */
var Crc24_B = [256]uint32 {
  0x00000000,0x00800063,0x008000a5,0x000000c6,0x00800129,0x0000014a,0x0000018c,0x008001ef,
  0x00800231,0x00000252,0x00000294,0x008002f7,0x00000318,0x0080037b,0x008003bd,0x000003de,
  0x00800401,0x00000462,0x000004a4,0x008004c7,0x00000528,0x0080054b,0x0080058d,0x000005ee,
  0x00000630,0x00800653,0x00800695,0x000006f6,0x00800719,0x0000077a,0x000007bc,0x008007df,
  0x00800861,0x00000802,0x000008c4,0x008008a7,0x00000948,0x0080092b,0x008009ed,0x0000098e,
  0x00000a50,0x00800a33,0x00800af5,0x00000a96,0x00800b79,0x00000b1a,0x00000bdc,0x00800bbf,
  0x00000c60,0x00800c03,0x00800cc5,0x00000ca6,0x00800d49,0x00000d2a,0x00000dec,0x00800d8f,
  0x00800e51,0x00000e32,0x00000ef4,0x00800e97,0x00000f78,0x00800f1b,0x00800fdd,0x00000fbe,
  0x008010a1,0x000010c2,0x00001004,0x00801067,0x00001188,0x008011eb,0x0080112d,0x0000114e,
  0x00001290,0x008012f3,0x00801235,0x00001256,0x008013b9,0x000013da,0x0000131c,0x0080137f,
  0x000014a0,0x008014c3,0x00801405,0x00001466,0x00801589,0x000015ea,0x0000152c,0x0080154f,
  0x00801691,0x000016f2,0x00001634,0x00801657,0x000017b8,0x008017db,0x0080171d,0x0000177e,
  0x000018c0,0x008018a3,0x00801865,0x00001806,0x008019e9,0x0000198a,0x0000194c,0x0080192f,
  0x00801af1,0x00001a92,0x00001a54,0x00801a37,0x00001bd8,0x00801bbb,0x00801b7d,0x00001b1e,
  0x00801cc1,0x00001ca2,0x00001c64,0x00801c07,0x00001de8,0x00801d8b,0x00801d4d,0x00001d2e,
  0x00001ef0,0x00801e93,0x00801e55,0x00001e36,0x00801fd9,0x00001fba,0x00001f7c,0x00801f1f,
  0x00802121,0x00002142,0x00002184,0x008021e7,0x00002008,0x0080206b,0x008020ad,0x000020ce,
  0x00002310,0x00802373,0x008023b5,0x000023d6,0x00802239,0x0000225a,0x0000229c,0x008022ff,
  0x00002520,0x00802543,0x00802585,0x000025e6,0x00802409,0x0000246a,0x000024ac,0x008024cf,
  0x00802711,0x00002772,0x000027b4,0x008027d7,0x00002638,0x0080265b,0x0080269d,0x000026fe,
  0x00002940,0x00802923,0x008029e5,0x00002986,0x00802869,0x0000280a,0x000028cc,0x008028af,
  0x00802b71,0x00002b12,0x00002bd4,0x00802bb7,0x00002a58,0x00802a3b,0x00802afd,0x00002a9e,
  0x00802d41,0x00002d22,0x00002de4,0x00802d87,0x00002c68,0x00802c0b,0x00802ccd,0x00002cae,
  0x00002f70,0x00802f13,0x00802fd5,0x00002fb6,0x00802e59,0x00002e3a,0x00002efc,0x00802e9f,
  0x00003180,0x008031e3,0x00803125,0x00003146,0x008030a9,0x000030ca,0x0000300c,0x0080306f,
  0x008033b1,0x000033d2,0x00003314,0x00803377,0x00003298,0x008032fb,0x0080323d,0x0000325e,
  0x00803581,0x000035e2,0x00003524,0x00803547,0x000034a8,0x008034cb,0x0080340d,0x0000346e,
  0x000037b0,0x008037d3,0x00803715,0x00003776,0x00803699,0x000036fa,0x0000363c,0x0080365f,
  0x008039e1,0x00003982,0x00003944,0x00803927,0x000038c8,0x008038ab,0x0080386d,0x0000380e,
  0x00003bd0,0x00803bb3,0x00803b75,0x00003b16,0x00803af9,0x00003a9a,0x00003a5c,0x00803a3f,
  0x00003de0,0x00803d83,0x00803d45,0x00003d26,0x00803cc9,0x00003caa,0x00003c6c,0x00803c0f,
  0x00803fd1,0x00003fb2,0x00003f74,0x00803f17,0x00003ef8,0x00803e9b,0x00803e5d,0x00003e3e}

/**
 * G16 CRC lookup table
 *
 * CRC16		: P(X) = x^16+x^12+x^5+1
 * Width     	: 2 bytes
 * Poly      	: 0x1021
 * Reflected 	: false
 */
var Crc16 = [256]uint32 {
  0x00000000,0x00001021,0x00002042,0x00003063,0x00004084,0x000050a5,0x000060c6,0x000070e7,
  0x00008108,0x00009129,0x0000a14a,0x0000b16b,0x0000c18c,0x0000d1ad,0x0000e1ce,0x0000f1ef,
  0x00001231,0x00000210,0x00003273,0x00002252,0x000052b5,0x00004294,0x000072f7,0x000062d6,
  0x00009339,0x00008318,0x0000b37b,0x0000a35a,0x0000d3bd,0x0000c39c,0x0000f3ff,0x0000e3de,
  0x00002462,0x00003443,0x00000420,0x00001401,0x000064e6,0x000074c7,0x000044a4,0x00005485,
  0x0000a56a,0x0000b54b,0x00008528,0x00009509,0x0000e5ee,0x0000f5cf,0x0000c5ac,0x0000d58d,
  0x00003653,0x00002672,0x00001611,0x00000630,0x000076d7,0x000066f6,0x00005695,0x000046b4,
  0x0000b75b,0x0000a77a,0x00009719,0x00008738,0x0000f7df,0x0000e7fe,0x0000d79d,0x0000c7bc,
  0x000048c4,0x000058e5,0x00006886,0x000078a7,0x00000840,0x00001861,0x00002802,0x00003823,
  0x0000c9cc,0x0000d9ed,0x0000e98e,0x0000f9af,0x00008948,0x00009969,0x0000a90a,0x0000b92b,
  0x00005af5,0x00004ad4,0x00007ab7,0x00006a96,0x00001a71,0x00000a50,0x00003a33,0x00002a12,
  0x0000dbfd,0x0000cbdc,0x0000fbbf,0x0000eb9e,0x00009b79,0x00008b58,0x0000bb3b,0x0000ab1a,
  0x00006ca6,0x00007c87,0x00004ce4,0x00005cc5,0x00002c22,0x00003c03,0x00000c60,0x00001c41,
  0x0000edae,0x0000fd8f,0x0000cdec,0x0000ddcd,0x0000ad2a,0x0000bd0b,0x00008d68,0x00009d49,
  0x00007e97,0x00006eb6,0x00005ed5,0x00004ef4,0x00003e13,0x00002e32,0x00001e51,0x00000e70,
  0x0000ff9f,0x0000efbe,0x0000dfdd,0x0000cffc,0x0000bf1b,0x0000af3a,0x00009f59,0x00008f78,
  0x00009188,0x000081a9,0x0000b1ca,0x0000a1eb,0x0000d10c,0x0000c12d,0x0000f14e,0x0000e16f,
  0x00001080,0x000000a1,0x000030c2,0x000020e3,0x00005004,0x00004025,0x00007046,0x00006067,
  0x000083b9,0x00009398,0x0000a3fb,0x0000b3da,0x0000c33d,0x0000d31c,0x0000e37f,0x0000f35e,
  0x000002b1,0x00001290,0x000022f3,0x000032d2,0x00004235,0x00005214,0x00006277,0x00007256,
  0x0000b5ea,0x0000a5cb,0x000095a8,0x00008589,0x0000f56e,0x0000e54f,0x0000d52c,0x0000c50d,
  0x000034e2,0x000024c3,0x000014a0,0x00000481,0x00007466,0x00006447,0x00005424,0x00004405,
  0x0000a7db,0x0000b7fa,0x00008799,0x000097b8,0x0000e75f,0x0000f77e,0x0000c71d,0x0000d73c,
  0x000026d3,0x000036f2,0x00000691,0x000016b0,0x00006657,0x00007676,0x00004615,0x00005634,
  0x0000d94c,0x0000c96d,0x0000f90e,0x0000e92f,0x000099c8,0x000089e9,0x0000b98a,0x0000a9ab,
  0x00005844,0x00004865,0x00007806,0x00006827,0x000018c0,0x000008e1,0x00003882,0x000028a3,
  0x0000cb7d,0x0000db5c,0x0000eb3f,0x0000fb1e,0x00008bf9,0x00009bd8,0x0000abbb,0x0000bb9a,
  0x00004a75,0x00005a54,0x00006a37,0x00007a16,0x00000af1,0x00001ad0,0x00002ab3,0x00003a92,
  0x0000fd2e,0x0000ed0f,0x0000dd6c,0x0000cd4d,0x0000bdaa,0x0000ad8b,0x00009de8,0x00008dc9,
  0x00007c26,0x00006c07,0x00005c64,0x00004c45,0x00003ca2,0x00002c83,0x00001ce0,0x00000cc1,
  0x0000ef1f,0x0000ff3e,0x0000cf5d,0x0000df7c,0x0000af9b,0x0000bfba,0x00008fd9,0x00009ff8,
  0x00006e17,0x00007e36,0x00004e55,0x00005e74,0x00002e93,0x00003eb2,0x00000ed1,0x00001ef0}

/**
 * G8 CRC lookup table
 *
 * CRC8			: P(X) = x^8+x^7+x^4+x^3+x^1+1
 * Width     	: 1 byte
 * Poly      	: 0x9B
 * Reflected 	: false
 */
var Crc8 = [256]uint32 {
  0x00000000,0x0000009b,0x000000ad,0x00000036,0x000000c1,0x0000005a,0x0000006c,0x000000f7,
  0x00000019,0x00000082,0x000000b4,0x0000002f,0x000000d8,0x00000043,0x00000075,0x000000ee,
  0x00000032,0x000000a9,0x0000009f,0x00000004,0x000000f3,0x00000068,0x0000005e,0x000000c5,
  0x0000002b,0x000000b0,0x00000086,0x0000001d,0x000000ea,0x00000071,0x00000047,0x000000dc,
  0x00000064,0x000000ff,0x000000c9,0x00000052,0x000000a5,0x0000003e,0x00000008,0x00000093,
  0x0000007d,0x000000e6,0x000000d0,0x0000004b,0x000000bc,0x00000027,0x00000011,0x0000008a,
  0x00000056,0x000000cd,0x000000fb,0x00000060,0x00000097,0x0000000c,0x0000003a,0x000000a1,
  0x0000004f,0x000000d4,0x000000e2,0x00000079,0x0000008e,0x00000015,0x00000023,0x000000b8,
  0x000000c8,0x00000053,0x00000065,0x000000fe,0x00000009,0x00000092,0x000000a4,0x0000003f,
  0x000000d1,0x0000004a,0x0000007c,0x000000e7,0x00000010,0x0000008b,0x000000bd,0x00000026,
  0x000000fa,0x00000061,0x00000057,0x000000cc,0x0000003b,0x000000a0,0x00000096,0x0000000d,
  0x000000e3,0x00000078,0x0000004e,0x000000d5,0x00000022,0x000000b9,0x0000008f,0x00000014,
  0x000000ac,0x00000037,0x00000001,0x0000009a,0x0000006d,0x000000f6,0x000000c0,0x0000005b,
  0x000000b5,0x0000002e,0x00000018,0x00000083,0x00000074,0x000000ef,0x000000d9,0x00000042,
  0x0000009e,0x00000005,0x00000033,0x000000a8,0x0000005f,0x000000c4,0x000000f2,0x00000069,
  0x00000087,0x0000001c,0x0000002a,0x000000b1,0x00000046,0x000000dd,0x000000eb,0x00000070,
  0x0000000b,0x00000090,0x000000a6,0x0000003d,0x000000ca,0x00000051,0x00000067,0x000000fc,
  0x00000012,0x00000089,0x000000bf,0x00000024,0x000000d3,0x00000048,0x0000007e,0x000000e5,
  0x00000039,0x000000a2,0x00000094,0x0000000f,0x000000f8,0x00000063,0x00000055,0x000000ce,
  0x00000020,0x000000bb,0x0000008d,0x00000016,0x000000e1,0x0000007a,0x0000004c,0x000000d7,
  0x0000006f,0x000000f4,0x000000c2,0x00000059,0x000000ae,0x00000035,0x00000003,0x00000098,
  0x00000076,0x000000ed,0x000000db,0x00000040,0x000000b7,0x0000002c,0x0000001a,0x00000081,
  0x0000005d,0x000000c6,0x000000f0,0x0000006b,0x0000009c,0x00000007,0x00000031,0x000000aa,
  0x00000044,0x000000df,0x000000e9,0x00000072,0x00000085,0x0000001e,0x00000028,0x000000b3,
  0x000000c3,0x00000058,0x0000006e,0x000000f5,0x00000002,0x00000099,0x000000af,0x00000034,
  0x000000da,0x00000041,0x00000077,0x000000ec,0x0000001b,0x00000080,0x000000b6,0x0000002d,
  0x000000f1,0x0000006a,0x0000005c,0x000000c7,0x00000030,0x000000ab,0x0000009d,0x00000006,
  0x000000e8,0x00000073,0x00000045,0x000000de,0x00000029,0x000000b2,0x00000084,0x0000001f,
  0x000000a7,0x0000003c,0x0000000a,0x00000091,0x00000066,0x000000fd,0x000000cb,0x00000050,
  0x000000be,0x00000025,0x00000013,0x00000088,0x0000007f,0x000000e4,0x000000d2,0x00000049,
  0x00000095,0x0000000e,0x00000038,0x000000a3,0x00000054,0x000000cf,0x000000f9,0x00000062,
  0x0000008c,0x00000017,0x00000021,0x000000ba,0x0000004d,0x000000d6,0x000000e0,0x0000007b}

// reflectBits reverses the such that the bit in position 31 is moved to position 0,
// the bit in position 30 is moved to position 1, etc...
func reflectBits(x uint32) uint32 {
	x = ((x & 0x55555555) << 1) | ((x >> 1) & 0x55555555);
	x = ((x & 0x33333333) << 2) | ((x >> 2) & 0x33333333);
	x = ((x & 0x0F0F0F0F) << 4) | ((x >> 4) & 0x0F0F0F0F);
	x = (x << 24) | ((x & 0xFF00) << 8) | ((x >> 8) & 0xFF00) | (x >> 24)

	return x
}

// Crc calculates the CRC over bitCnt bits of the data slice. The CRC is returned with
// the highest order byte starting at index zero and so on so that the Append method
// can be used.
func Crc(data Data, table *[256]uint32, bitCnt int, crcSz int) (err bool, crc Data) {
	switch crcSz {
		case 8, 16, 24:
			err = false
		default:
			err = true
			return
	}

	i := 0
	z := uint32(0)
	byteCnt := bitCnt / 8
	orphanCnt := bitCnt % 0x8
	orphanShift := uint32(8 - orphanCnt)
	regShift := uint32(32 - crcSz)

	for i = 0; i < byteCnt; i++ {
		z = (table[uint32(data[i] ^ byte(z >> 24))] << regShift) ^ (z << 8);
	}

	if orphanCnt > 0 {
		z = (table[(uint32(data[i] ^ byte(z >> 24))) >> orphanShift] << regShift) ^ (z << uint8(orphanCnt));
	}

	z = reflectBits(z)  & (0xFFFFFFFF >> regShift)
	c := crcSz / 8

	crc = make(Data, c)

	for i = (c - 1); i >= 0; i-- {
		// upper most byte to lowest address, etc...
		crc[i] = uint8(z >> (uint32(i) * 8))
	}

	return
}

